#!/bin/sh

set -e

PKG_USER="_grouprise"
PKG_GROUP="_grouprise"
DIR_BACKUPS="/var/backups/grouprise"
DIR_ETC="/etc/grouprise"
GROUPRISE_SETTINGS_FILE="$DIR_ETC/conf.d/100-package.yaml"
DIR_HOME="/var/lib/grouprise"
DIR_LOGS="/var/log/grouprise"
DIR_MEDIA="/var/lib/grouprise/media"
DIR_STATIC="/var/lib/grouprise/static"
UWSGI_APP_SYMLINK="/etc/uwsgi/apps-enabled/grouprise.ini"

. /usr/share/debconf/confmodule
db_version 2.1

# debconf does not work with "set -u", thus we enable it after loading debconf
set -eu


set_configured_grouprise_domain() {
    local domain="$1"
    printf '%s' "$domain" | grouprise_settings set "domain"
    # update the domain and maybe the name (if it was never set)
    # This operation may fail, if the database is not configured, yet.
    printf '%s\n' \
            "UPDATE django_site SET domain='$domain' WHERE id=1;" \
            "UPDATE django_site SET name='$domain' WHERE id=1 AND name='example.com';" \
        | grouprisectl dbshell >/dev/null 2>&1 || true
}


ask_debconf_question() {
    local question="$1"
    local priority="$2"
    local default_value="${3:-}"
    local RET
    if [ -n "$default_value" ] && ( ! db_get "$question" || [ -z "$RET" ] ); then
        # the value is not configured via debconf, yet
        db_set "$question" "$default_value"
    fi
    db_input "$priority" "$question" || true
    # shellcheck disable=SC2119
    db_go || true
    db_get "$question" || true
    printf '%s' "$RET"
}


configure_grouprise() {
    local grouprise_domain webserver_type
    grouprise_domain=$(ask_debconf_question "grouprise/domain" "high" "$(hostname -f)")
    webserver_type=$(ask_debconf_question "grouprise/configure-webserver" "high")
    set_configured_grouprise_domain "$grouprise_domain" || true
    case "$webserver_type" in
        nginx)
            sed -i "s|server_name .*$|server_name $grouprise_domain;|g" /etc/nginx/sites-available/grouprise
            if [ ! -e "/etc/nginx/sites-enabled/grouprise" ]; then
                mkdir -p /etc/nginx/sites-enabled/
                ln -s ../sites-available/grouprise /etc/nginx/sites-enabled/
            fi
            if [ -x /usr/sbin/nginx ]; then
                service nginx reload || true
            fi
            ;;
        none)
            ;;
        *)
            echo >&2 "Ignoring unknown webserver type for grouprise: $webserver_type"
            ;;
    esac
}


grouprise_settings() {
    # write settings with root privileges - otherwise we could not write to files below /etc/
    [ "$1" = "set" ] && export GROUPRISE_USER=root
    grouprisectl grouprise_settings --modifiable-config="$GROUPRISE_SETTINGS_FILE" "$@"
}


if [ "$1" = "configure" ]; then
    # the user needs to be created before the configuration (the latter relies on grouprisectl)
    if ! getent group "$PKG_GROUP" >/dev/null; then
        # "--force-badname" is required for Buster (the Debian Policy was changed for Bullseye)
        addgroup --quiet --system --force-badname "$PKG_GROUP"
    fi

    if ! getent passwd "$PKG_USER" >/dev/null; then
        # "--force-badname" is required for Buster (the Debian Policy was changed for Bullseye)
        adduser --quiet --system --disabled-password \
            --force-badname \
            --ingroup "$PKG_GROUP" --home "$DIR_HOME" "$PKG_USER"
    fi

    if [ -z "$(grouprise_settings  get "secret_key" 2>/dev/null)" ]; then
        # configure a random SECRET_KEY - otherwise "migrate" fails
        new_secret_key=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")
        if [ ! -s "$GROUPRISE_SETTINGS_FILE" ] && ! grouprise_settings --help >/dev/null 2>&1; then
            # The config file does not exist and the "grouprise_settings" is not available, yet.
            # Probably the "secret_key" is not configured, thus Django refuses to look for
            # management commands within the installed apps.
            # In this case we need to set the "secret_key" manually.
            mkdir -p "$(dirname "$GROUPRISE_SETTINGS_FILE")"
            echo "secret_key: '$new_secret_key'" > "$GROUPRISE_SETTINGS_FILE"
        else
            printf '%s' "$new_secret_key" | grouprise_settings set "secret_key"
        fi
    fi

    # adjust ownership and permissions of backup directory (keeping local modifications)
    if [ "$(stat --format="%u:%g:%a" "$DIR_BACKUPS")" = "0:0:755" ]; then
        chown "$PKG_USER:$PKG_GROUP" "$DIR_BACKUPS"
        chmod 750 "$DIR_BACKUPS"
    fi
    if [ -z "$(grouprise_settings get "backup_path")" ]; then
        printf '%s' "$DIR_BACKUPS" | grouprise_settings set "backup_path"
    fi

    configure_grouprise

    if [ -e "$UWSGI_APP_SYMLINK" ]; then
        if grouprisectl migrate --no-input >/dev/null; then
            rm -f "$DIR_ETC/maintenance_mode"
        else
            echo "error while executing $PKG_USER migrations. maintenance mode still active (indicator file: $DIR_ETC/maintenance_mode)" >&2
        fi
        # restart uwsgi
        if [ -d /run/systemd/system ]; then
            deb-systemd-invoke restart uwsgi.service >/dev/null || true
        else
            invoke-rc.d --skip-systemd-native uwsgi restart || true
        fi
    fi

    # protect sensitive content (e.g. database credentials)
    chown "root:$PKG_GROUP" "$GROUPRISE_SETTINGS_FILE"
    chmod 640 "$GROUPRISE_SETTINGS_FILE"

    mkdir -p "$DIR_LOGS"
    chown "$PKG_USER:adm" "$DIR_LOGS"

    mkdir -p "$DIR_MEDIA" "$DIR_STATIC"
    chown "$PKG_USER:$PKG_GROUP" "$DIR_MEDIA" "$DIR_STATIC"

    # assemble static assets after an update of the grouprise package
    grouprisectl collectstatic --no-input
fi

if [ "$1" = "triggered" ]; then
    # assemble static assets from related packages
    grouprisectl collectstatic --clear --no-input
fi

# manually trigger byte compilation (since we do not use dh_python3)
if which py3compile >/dev/null; then
    py3compile -p grouprise
fi

set +eu

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
