# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-09 14:06
from __future__ import unicode_literals

import django
from django.db import migrations, models

import grouprise.core
import grouprise.core.models


def no_validator(arg):
    pass


def validate_reservation(value):
    if value in ["gestalt", "stadt"]:
        raise exceptions.ValidationError(
            "Die Adresse '%(value)s' darf nicht verwendet werden.",
            params={"value": value},
            code="reserved",
        )


class AutoSlugField(django.db.models.SlugField):
    def __init__(self, *args, **kwargs):
        self.dodging = True
        if "dodging" in kwargs:
            self.dodging = kwargs.pop("dodging")
        self.populate_from = kwargs.pop("populate_from")
        self.reserve = []
        if "reserve" in kwargs:
            self.reserve = kwargs.pop("reserve")
        kwargs["validators"] = [validate_reservation]
        super().__init__(*args, **kwargs)

    def deconstruct(self):
        name, path, args, kwargs = super().deconstruct()
        kwargs["populate_from"] = self.populate_from
        kwargs["reserve"] = self.reserve
        return name, path, args, kwargs

    def pre_save(self, model_instance, add):
        if add:
            value = self.slugify(
                type(model_instance),
                self.attname,
                getattr(model_instance, self.populate_from),
                validate_reservation,
                self.dodging,
            )[:45]
            setattr(model_instance, self.attname, value)
            return value
        else:
            return super().pre_save(model_instance, add)

    def slugify(self, model, field, value, validator=no_validator, dodging=True):
        orig_slug = slug = grouprise.core.text.slugify(value)
        if not dodging:
            return slug
        i = 0
        while True:
            try:
                try:
                    validator(slug)
                except exceptions.ValidationError:
                    pass
                else:
                    model.objects.get(**{field: slug})
                i += 1
                slug = orig_slug + "-" + str(i)
            except model.DoesNotExist:
                return slug


class Migration(migrations.Migration):

    dependencies = [
        ("tags", "0003_auto_20170209_1451"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "slug",
                    AutoSlugField(
                        populate_from="name",
                        reserve=[],
                        unique=True,
                        validators=[validate_reservation],
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.AlterModelOptions(
            name="tagged",
            options={},
        ),
    ]
