image: git-registry.hack-hro.de:443/grouprise/grouprise/build:bullseye
variables:
    # Do not use the 'build/' subdirectory, since this would get cleanup up during 'dist-deb'.
    # This directory needs to be listed in debian/source/options in 'extend-diff-ignore'.
    virtualenv_directory: "$CI_PROJECT_DIR/gitlab-ci-build-venv"
    # force usage of "stdlib" due to https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1003252
    # TODO: remove after switching to Bookworm
    SETUPTOOLS_USE_DISTUTILS: stdlib

.populate_virtualenv: &populate_virtualenv
    - python3 -m venv --system-site-packages "$virtualenv_directory"
    - source "$virtualenv_directory/bin/activate"
    - pip3 install -r requirements.txt

.build_deb_package:
    script:
        - *populate_virtualenv
        - make dist-deb DEBIAN_BUILDPACKAGE_COMMAND="dpkg-buildpackage -sa --no-sign"
        # turn the symlink of the orig tarball into a real file
        - a=$(ls build/debian/grouprise_*.orig.tar.gz) && cp -L "$a" "$a.tmp" && mv "$a.tmp" "$a"
        # generate an export of the versions of the embedded python modules (helpful for a rebuild)
        - pip3 install pip-tools
        - pip-compile --output-file build/debian/requirements-build.txt requirements.txt
    artifacts:
        name: grouprise-deb
        paths:
            - build/debian
        exclude:
            # omit the full build directory (including the huge "node_modules" directory)
            - build/debian/grouprise-*/**

make_test:
    stage: test
    script:
        - *populate_virtualenv
        # stadt.settings is required for the tests
        - make app_local_settings
        - make lint
        - make test
    # disable artifacts: otherwise the deb package would be checked by lintian (and fail)
    dependencies: []
    # do not wait for the build jobs
    needs: []

# The latest built deb package is available under the following URL:
#   https://git.hack-hro.de/grouprise/grouprise/builds/artifacts/main/raw/build/debian/export/grouprise.deb?job=deb-package
make_deb_package:
    extends: .build_deb_package
    stage: build
    except:
        - tags
    artifacts:
        expire_in: 1w

make_deb_package_release:
    extends: .build_deb_package
    stage: build
    only:
        - tags
        - web
    artifacts:
        expire_in: 1000 yrs

test_deb_package:
    stage: test
    dependencies:
      - make_deb_package
      - make_deb_package_release
    script:
      # make all built grouprise packages available locally
      - apt-get install -y local-apt-repository
      - mkdir -p /srv/local-apt-repository
      - cp build/debian/*.deb /srv/local-apt-repository/
      - /usr/lib/local-apt-repository/rebuild
      - apt-get update
      # we are running autopkgtest manually, thus we need to install its dependencies
      - "apt-get install -y $(grep '^Depends: ' debian/tests/control | cut -f 2- -d ' ' | tr -d ',' | tr ' ' '\n' | sort | uniq)"
      # install and run autopkgtest
      - apt-get install -y autopkgtest
      - autopkgtest --no-built-binaries build/debian/grouprise*.dsc -- null

# the exported pages are served (indirectly) via https://docs.grouprise.org/
pages:
    stage: build
    script:
        - make doc
        # gitlab's CI feature "pages" requires "public" as the name of content directory
        - mv build/doc/html public
    only:
        - main
    artifacts:
        paths:
            - public

# create gitlab releases based on tags
release_job:
  stage: deploy
  # the image maintained by gitlab.com contains the "release-cli" executable
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'echo "running release_job: $CI_COMMIT_TAG"'
    # show the current build artifacts (may we should add these to the release as assets)
    - find build/debian || true
  release:
    name: 'Release $CI_COMMIT_TAG'
    # we assume, that release notes for this tag were created before (omitting the "v" prefix)
    description: 'docs/releases/${CI_COMMIT_TAG#v}.md'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
